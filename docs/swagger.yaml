basePath: /
definitions:
  models.AdvMessageQuery:
    properties:
      AdtID:
        properties:
          eq:
            example: 700061957
            type: integer
        type: object
      BrandID:
        properties:
          eq:
            example: 44362
            type: integer
        type: object
    type: object
  models.AdvMessagesLoadRequest:
    properties:
      Advertisers:
        items:
          properties:
            ID:
              type: string
          type: object
        type: array
      AdvertisingMessageIDs:
        items:
          properties:
            ID:
              type: string
          type: object
        type: array
      Aspects:
        items:
          properties:
            ID:
              type: string
          type: object
        type: array
      CreationDateEnd:
        example: "20191201"
        type: string
      CreationDateStart:
        example: "20190301"
        type: string
      FillMaterialTags:
        example: "true"
        type: string
    type: object
  models.AggMediaplanQuery:
    properties:
      CppOffPrime:
        properties:
          ge:
            example: 100
            type: number
        type: object
      CppPrime:
        properties:
          eq:
            example: 2205.20143600803
            type: number
        type: object
      MplMonth:
        properties:
          eq:
            example: 201902
            type: integer
        type: object
    type: object
  models.BudgetLoadRequest:
    properties:
      EndMonth:
        example: "201912"
        type: string
      SellingDirectionID:
        example: "23"
        type: string
      StartMonth:
        example: "201903"
        type: string
    type: object
  models.BudgetQuery:
    properties:
      AdtID:
        properties:
          eq:
            example: 700068653
            type: integer
        type: object
      CnlID:
        properties:
          eq:
            example: 1020335
            type: integer
        type: object
      Month:
        properties:
          eq:
            example: 201902
            type: integer
        type: object
    type: object
  models.ChannelLoadRequest:
    properties:
      SellingDirectionID:
        example: "23"
        type: string
    type: object
  models.ChannelQuery:
    properties:
      ID:
        properties:
          eq:
            example: 1018583
            type: integer
        type: object
      MainChnl:
        properties:
          eq:
            example: 1018568
            type: integer
        type: object
      SellingDirectionID:
        properties:
          eq:
            example: 23
            type: integer
        type: object
    type: object
  models.CommonResponse:
    additionalProperties: true
    type: object
  models.CustomersWithAdvertiserDataQuery:
    properties:
      CustID:
        properties:
          eq:
            example: 1
            type: integer
        type: object
    type: object
  models.CustomersWithAdvertiserQuery:
    properties:
      ID:
        properties:
          eq:
            example: 1
            type: integer
        type: object
    type: object
  models.MediaplanLoadRequest:
    properties:
      EndMonth:
        example: "201912"
        type: string
      SellingDirectionID:
        example: "23"
        type: string
      StartMonth:
        example: "201903"
        type: string
    type: object
  models.MediaplanQuery:
    properties:
      AdtID:
        properties:
          eq:
            example: 700068653
            type: integer
        type: object
      AgrID:
        properties:
          eq:
            example: 81024
            type: integer
        type: object
      MplID:
        properties:
          eq:
            example: 14824608
            type: integer
        type: object
    type: object
  models.ProMasterQuery:
    properties:
      ProID:
        properties:
          eq:
            example: 355114
            type: integer
        type: object
      PropName:
        properties:
          eq:
            example: Ведущий
            type: string
        type: object
    type: object
  models.ProgramBreaksLightModeLoadRequest:
    properties:
      CnlList:
        items:
          properties:
            Cnl:
              description: ID канала (int, not nillable)
              example: "1018566"
              type: string
          type: object
        type: array
      EndDate:
        description: Дата окончания периода (включительно) в формате YYYYMMDD
        example: "20190202"
        type: string
      InclForecast:
        description: Признак "Как заполнять секцию прогнозных рейтингов". 0 - Не заполнять,  1
          - Заполнять только ЦА программатика, 2 - Заполнять всеми возможными ЦА
        example: "1"
        type: string
      InclProgAttr:
        description: Флаг "Заполнять секцию ProMaster". 1 - да, 0 - нет. (int, not
          nillable)
        example: "1"
        type: string
      ProtocolVersion:
        example: "2"
        type: string
      SellingDirectionID:
        description: ID направления продаж
        example: "23"
        type: string
      StartDate:
        description: Дата начала периода в формате YYYYMMDD
        example: "20190201"
        type: string
    type: object
  models.ProgramBreaksLightModeQuery:
    properties:
      BlockID:
        properties:
          eq:
            example: 91827134
            type: integer
        type: object
    type: object
  models.ProgramBreaksLoadRequest:
    properties:
      CnlList:
        items:
          properties:
            Cnl:
              description: ID канала (int, not nillable)
              example: "1018566"
              type: string
          type: object
        type: array
      EndDate:
        description: Дата окончания периода (включительно) в формате YYYYMMDD
        example: "20170702"
        type: string
      InclForecast:
        description: Признак "Как заполнять секцию прогнозных рейтингов". 0 - Не заполнять,  1
          - Заполнять только ЦА программатика, 2 - Заполнять всеми возможными ЦА
        example: "1"
        type: string
      InclProgAttr:
        description: Флаг "Заполнять секцию ProMaster". 1 - да, 0 - нет. (int, not
          nillable)
        example: "1"
        type: string
      ProtocolVersion:
        example: "2"
        type: string
      SellingDirectionID:
        description: ID направления продаж
        example: "21"
        type: string
      StartDate:
        description: Дата начала периода в формате YYYYMMDD
        example: "20170701"
        type: string
    type: object
  models.ProgramBreaksQuery:
    properties:
      CnlID:
        properties:
          eq:
            example: 1020232
            type: integer
        type: object
      Month:
        properties:
          eq:
            example: 201902
            type: integer
        type: object
      WeekDay:
        properties:
          ge:
            example: 1
            type: integer
        type: object
    type: object
  models.QuerySpotsOrderBlockQuery:
    properties:
      BlockID:
        properties:
          eq:
            example: 451118797
            type: integer
        type: object
      OrdID:
        properties:
          eq:
            example: 319260
            type: integer
        type: object
    type: object
  models.RankQuery:
    properties:
      ID:
        properties:
          eq:
            example: 1
            type: integer
        type: object
    type: object
  models.RanksLoadRequest:
    type: object
  models.SpotsLoadRequest:
    properties:
      AdtList:
        items:
          properties:
            AdtID:
              type: string
          type: object
        type: array
      ChannelList:
        items:
          properties:
            Cnl:
              type: string
            Main:
              type: string
          type: object
        type: array
      EndDate:
        type: string
      InclOrdBlocks:
        type: string
      SellingDirectionID:
        type: string
      StartDate:
        type: string
    type: object
  models.SpotsQuery:
    properties:
      Rating:
        properties:
          eq:
            example: 0.58321
            type: number
        type: object
      SpotID:
        properties:
          eq:
            example: 451118797
            type: integer
        type: object
    type: object
  models.StreamResponse:
    properties:
      body:
        items:
          type: integer
        type: array
      request:
        type: string
    type: object
  models.SwaggerAddMPlanFilmRequest:
    properties:
      EndDate:
        type: string
      FilmID:
        type: string
      MplID:
        type: string
      StartDate:
        type: string
    type: object
  models.SwaggerAddMPlanRequest:
    properties:
      BrandID:
        type: string
      DateFrom:
        type: string
      DateTo:
        type: string
      MplCnlID:
        type: string
      MplName:
        type: string
      MultiSpotsInBlock:
        type: string
      OrdID:
        type: string
    type: object
  models.SwaggerAddSpotRequest:
    properties:
      AuctionBidValue:
        type: string
      BlockID:
        type: string
      FilmID:
        type: string
      FixedPosition:
        type: string
      Position:
        type: string
    type: object
  models.SwaggerChangeFilmsRequest:
    properties:
      ChangeFilms:
        items:
          properties:
            CommInMplIDs:
              type: string
            FakeSpotIDs:
              type: string
          type: object
        type: array
    type: object
  models.SwaggerChangeMPlanFilmPlannedInventoryRequest:
    properties:
      data:
        items:
          properties:
            CommInMpl:
              items:
                properties:
                  ID:
                    type: string
                  Inventory:
                    type: string
                type: object
              type: array
          type: object
        type: array
    type: object
  models.SwaggerChangeSpotRequest:
    properties:
      FirstSpotID:
        type: string
      SecondSpotID:
        type: string
    type: object
  models.SwaggerDeleteMPlanFilmRequest:
    properties:
      CommInMplID:
        type: string
    type: object
  models.SwaggerDeleteSpotRequest:
    properties:
      SpotID:
        type: string
    type: object
  models.SwaggerGetAdvMessagesRequest:
    properties:
      Advertisers:
        items:
          properties:
            ID:
              type: string
          type: object
        type: array
      AdvertisingMessageIDs:
        items:
          properties:
            ID:
              type: string
          type: object
        type: array
      Aspects:
        items:
          properties:
            ID:
              type: string
          type: object
        type: array
      CreationDateEnd:
        type: string
      CreationDateStart:
        type: string
      FillMaterialTags:
        type: string
    type: object
  models.SwaggerGetBudgetsRequest:
    properties:
      AdvertiserList:
        items:
          properties:
            ID:
              type: string
          type: object
        type: array
      ChannelList:
        items:
          properties:
            ID:
              type: string
          type: object
        type: array
      EndMonth:
        type: string
      SellingDirectionID:
        type: string
      StartMonth:
        type: string
    type: object
  models.SwaggerGetChannelsRequest:
    properties:
      SellingDirectionID:
        type: string
    type: object
  models.SwaggerGetCustomersWithAdvertisersRequest:
    properties:
      SellingDirectionID:
        type: string
    type: object
  models.SwaggerGetDeletedSpotInfoRequest:
    properties:
      Agreements:
        items:
          properties:
            ID:
              type: string
          type: object
        type: array
      DateEnd:
        type: string
      DateStart:
        type: string
    type: object
  models.SwaggerGetMPLansRequest:
    properties:
      AdtList:
        items:
          properties:
            AdtID:
              type: string
          type: object
        type: array
      ChannelList:
        items:
          properties:
            Cnl:
              type: string
          type: object
        type: array
      EndMonth:
        type: string
      IncludeEmpty:
        type: string
      SellingDirectionID:
        type: string
      StartMonth:
        type: string
    type: object
  models.SwaggerGetProgramBreaksRequest:
    properties:
      AudRatDec:
        description: Внимание! Этот элемент является устаревшим. Его значение игнорируется
          (при расчетах всегда используется значение 9) и скоро он будет удален. Кол-во
          десятичных знаков округления. Допустимы значения 1..9. По умолчанию - 9.
          (int, nillable)
        example: "2"
        type: string
      CnlList:
        items:
          properties:
            Cnl:
              description: ID канала (int, not nillable)
              example: "1018566"
              type: string
          type: object
        type: array
      EndDate:
        description: Дата окончания периода (включительно) в формате YYYYMMDD
        example: "20170702"
        type: string
      InclForecast:
        description: Признак "Как заполнять секцию прогнозных рейтингов". 0 - Не заполнять,  1
          - Заполнять только ЦА программатика, 2 - Заполнять всеми возможными ЦА
        example: "1"
        type: string
      InclProgAttr:
        description: Флаг "Заполнять секцию ProMaster". 1 - да, 0 - нет. (int, not
          nillable)
        example: "1"
        type: string
      LightMode:
        description: Флаг "облегченного режима". Выходной xml имеет другой формат
        example: "0"
        type: string
      ProtocolVersion:
        description: Флаг "ожидаемый формат ответа". (int, nillable). Допускается
          отсутствие этого элемента, в этом случае используется формат по умолчанию
          (1.0). 1 - старый формат (1.0), 2 - Новый формат (2.0), null - формат по-умолчанию
          (1.0). Внимание! В ближайших версиях этот элемент станет обязательным и
          не нулабельным.
        example: "2"
        type: string
      SellingDirectionID:
        description: ID направления продаж
        example: "21"
        type: string
      StartDate:
        description: Дата начала периода в формате YYYYMMDD
        example: "20170701"
        type: string
    type: object
  models.SwaggerGetRanksRequest:
    type: object
  models.SwaggerGetSpotsRequest:
    properties:
      AdtList:
        items:
          properties:
            AdtID:
              type: string
          type: object
        type: array
      ChannelList:
        items:
          properties:
            Cnl:
              type: string
            Main:
              type: string
          type: object
        type: array
      EndDate:
        type: string
      InclOrdBlocks:
        type: string
      SellingDirectionID:
        type: string
      StartDate:
        type: string
    type: object
  models.SwaggerSetSpotPositionRequest:
    properties:
      Distance:
        type: string
      SpotID:
        type: string
    type: object
  mongodb_backup.SwaggerBackupRequest:
    properties:
      Db:
        type: string
      Host:
        type: string
      Password:
        type: string
      Port:
        type: string
      Username:
        type: string
    type: object
  mongodb_backup.SwaggerListBackupsRequest:
    type: object
  routes.MqInfo:
    properties:
      consumers:
        type: integer
      messages:
        type: integer
      name:
        type: string
    type: object
info:
  contact: {}
  description: Документация
  title: ВИМБ API
  version: "1.0"
paths:
  /api/v1:
    get:
      consumes:
      - application/json
      description: Проверка статуса сервиса
      operationId: routes-health
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Проверка статуса сервиса
      tags:
      - Проверка сервиса
  /api/v1/adv-messages:
    post:
      consumes:
      - application/json
      description: Возвращает список роликов, созданных в указанный период времени.
        Список отфильтрован по правам НВ.
      operationId: routes-get-adv-messages
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerGetAdvMessagesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StreamResponse'
      summary: Возвращает список роликов, созданных в указанный период времени. Список
        отфильтрован по правам НВ.
      tags:
      - Справочники
  /api/v1/adv-messages/load:
    post:
      consumes:
      - application/json
      description: Создание задач, на загрузку роликов, за выбранный период.
      operationId: routes-load-adv-messages
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AdvMessagesLoadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommonResponse'
      summary: Создание задач, на загрузку роликов.
      tags:
      - Справочники
  /api/v1/adv-messages/query:
    post:
      consumes:
      - application/json
      description: 'Динамический запрос на загрузку сохраненных данных. Логические
        операторы: eq ==, ne !=, gt >, lt <, ge >=, le <=, in in, isnil is nil.'
      operationId: routes-query-adv-messages
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AdvMessageQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommonResponse'
      summary: Загрузку сохраненных роликов.
      tags:
      - Справочники
  /api/v1/agg-mediaplan/query:
    post:
      consumes:
      - application/json
      description: 'Динамический запрос на загрузку сохраненных данных. Логические
        операторы: eq ==, ne !=, gt >, lt <, ge >=, le <=, in in, isnil is nil.'
      operationId: routes-query-agg-mediaplans
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AggMediaplanQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommonResponse'
      summary: Загрузка агрегированных данных.
      tags:
      - Медиапланы
  /api/v1/backup:
    post:
      consumes:
      - application/json
      description: '- Создаем резервную копию MongoDВ. При пустых полях берет значения
        их config файла.'
      operationId: routes-post-backup
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/mongodb_backup.SwaggerBackupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StreamResponse'
      summary: Создает backup MongoDB.
      tags:
      - Backup
  /api/v1/backup-list:
    post:
      consumes:
      - application/json
      description: '- Возвращает список бэкапов, s3Key.'
      operationId: routes-post-backup-list
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/mongodb_backup.SwaggerListBackupsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StreamResponse'
      summary: Список бэкапов MongoDB.
      tags:
      - Backup
  /api/v1/budgets:
    post:
      consumes:
      - application/json
      description: Возвращает данные по сделкам в разрезе канало-периодов.
      operationId: routes-get-budgets
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerGetBudgetsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StreamResponse'
      summary: Возвращает данные по сделкам в разрезе канало-периодов.
      tags:
      - Сделки
  /api/v1/budgets/load:
    post:
      consumes:
      - application/json
      description: Создание задач, на загрузку бюджетов, за выбранный период.
      operationId: routes-load-budgets
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.BudgetLoadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommonResponse'
      summary: Создание задач, на загрузку бюджетов.
      tags:
      - Сделки
  /api/v1/budgets/query:
    post:
      consumes:
      - application/json
      description: 'Динамический запрос на загрузку сохраненных данных. Логические
        операторы: eq ==, ne !=, gt >, lt <, ge >=, le <=, in in, isnil is nil.'
      operationId: routes-query-budgets
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.BudgetQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommonResponse'
      summary: Загрузка сохраненных бюджетов.
      tags:
      - Сделки
  /api/v1/channels:
    post:
      consumes:
      - application/json
      description: Результат включает активные в настоящий момент для размещения каналы,
        а также каналы, которые станут активными в течение ближайших трех месяцев.
      operationId: routes-get-channels
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerGetChannelsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StreamResponse'
      summary: Возвращает отфильтрованный по правам НВ список каналов (точек врезки)
        указанного направления продаж.
      tags:
      - Справочники
  /api/v1/channels/load:
    post:
      consumes:
      - application/json
      description: Создание задач, на загрузку каналов, за выбранный период.
      operationId: routes-load-channels
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ChannelLoadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommonResponse'
      summary: Создание задач, на загрузку каналов.
      tags:
      - Справочники
  /api/v1/channels/query:
    post:
      consumes:
      - application/json
      description: 'Динамический запрос на загрузку сохраненных данных. Логические
        операторы: eq ==, ne !=, gt >, lt <, ge >=, le <=, in in, isnil is nil.'
      operationId: routes-query-channels
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ChannelQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommonResponse'
      summary: Загрузку сохраненных каналов.
      tags:
      - Справочники
  /api/v1/customers-with-advertisers:
    post:
      consumes:
      - application/json
      description: Возвращает список заказчиков с рекламодеталями для заданного направления
        продаж.
      operationId: routes-customers-with-advertisers
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerGetCustomersWithAdvertisersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StreamResponse'
      summary: Возвращает список заказчиков с рекламодеталями для заданного направления
        продаж.
      tags:
      - Сделки
  /api/v1/customers-with-advertisers-data/query:
    post:
      consumes:
      - application/json
      description: 'Динамический запрос на загрузку сохраненных данных. Логические
        операторы: eq ==, ne !=, gt >, lt <, ge >=, le <=, in in, isnil is nil.'
      operationId: routes-customers-with-advertisers-data-query
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CustomersWithAdvertiserDataQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StreamResponse'
      summary: Загрузка сохраненных заказчиков с рекламодеталями для заданного направления
        продаж.
      tags:
      - Сделки
  /api/v1/customers-with-advertisers/load:
    post:
      consumes:
      - application/json
      description: Создание задачи для загружки заказчиков с рекламодеталями для заданного
        направления продаж.
      operationId: routes-customers-with-advertisers-load
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerGetCustomersWithAdvertisersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StreamResponse'
      summary: Создание задачи для загружки заказчиков с рекламодеталями для заданного
        направления продаж.
      tags:
      - Сделки
  /api/v1/customers-with-advertisers/query:
    post:
      consumes:
      - application/json
      description: 'Динамический запрос на загрузку сохраненных данных. Логические
        операторы: eq ==, ne !=, gt >, lt <, ge >=, le <=, in in, isnil is nil.'
      operationId: routes-customers-with-advertisers-query
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CustomersWithAdvertiserQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StreamResponse'
      summary: Загрузка сохраненных заказчиков с рекламодеталями для заданного направления
        продаж.
      tags:
      - Сделки
  /api/v1/mediaplan:
    post:
      consumes:
      - application/json
      description: Возвращает доступные медиапланы. Минимальный кванта периода начитки
        - 1 месяц (с первого по последнее число).
      operationId: routes-get-mediaplans
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerGetMPLansRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StreamResponse'
      summary: Возвращает доступные медиапланы. Минимальный кванта периода начитки
        - 1 месяц (с первого по последнее число).
      tags:
      - Медиапланы
    put:
      consumes:
      - application/json
      description: Создает новый медиаплан.
      operationId: routes-add-mediaplans
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerAddMPlanRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StreamResponse'
      summary: Создает новый медиаплан.
      tags:
      - Медиапланы
  /api/v1/mediaplan/change-film-planned-inventory:
    post:
      consumes:
      - application/json
      description: Метод допускает массовое редактирование, при этом все ролики должны
        относиться к одному медиаплану.
      operationId: routes-change-mediaplan-film-planned-inventory
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerChangeMPlanFilmPlannedInventoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StreamResponse'
      summary: Замена планового инвентаря роликов в медиаплане.
      tags:
      - Медиапланы
  /api/v1/mediaplan/film:
    delete:
      consumes:
      - application/json
      description: Одним из требований для удаления является отсутствие соответствующего
        этому роличному сплиту размещения.
      operationId: routes-delete-mediaplan-film
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerDeleteMPlanFilmRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StreamResponse'
      summary: Удаляет ролик из медиаплана.
      tags:
      - Медиапланы
    post:
      consumes:
      - application/json
      description: “Втягивает” ролик в медиаплан. Период ролика в медиаплане устанавливается
        равным периоду медиаплана.
      operationId: routes-add-mediaplan-film
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerAddMPlanFilmRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StreamResponse'
      summary: “Втягивает” ролик в медиаплан. Период ролика в медиаплане устанавливается
        равным периоду медиаплана.
      tags:
      - Медиапланы
  /api/v1/mediaplan/load:
    post:
      consumes:
      - application/json
      description: Создание задач, на загрузку медиапланов.
      operationId: routes-load-mediaplans
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.MediaplanLoadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommonResponse'
      summary: Создание задач, на загрузку медиапланов.
      tags:
      - Медиапланы
  /api/v1/mediaplan/query:
    post:
      consumes:
      - application/json
      description: 'Динамический запрос на загрузку сохраненных данных. Логические
        операторы: eq ==, ne !=, gt >, lt <, ge >=, le <=, in in, isnil is nil.'
      operationId: routes-query-mediaplans
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.MediaplanQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommonResponse'
      summary: Загрузка сохраненных медиапланов.
      tags:
      - Медиапланы
  /api/v1/mq/queues:
    get:
      consumes:
      - application/json
      description: Состояние очередей.
      operationId: routes-get-mq-queue-metrics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/routes.MqInfo'
            type: array
      summary: Состояние очередей.
      tags:
      - MQ
  /api/v1/program-breaks:
    post:
      consumes:
      - application/json
      description: Возвращает Данные по блокам + занятые объемы блоков.
      operationId: routes-get-program-breaks
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerGetProgramBreaksRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StreamResponse'
      summary: Возвращает Данные по блокам + занятые объемы блоков.
      tags:
      - Блоки
  /api/v1/program-breaks-light/load:
    post:
      consumes:
      - application/json
      description: Создание задач, на загрузку сеток Light Mode, за выбранный период.
      operationId: routes-load-program-breaks-light-mode
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ProgramBreaksLightModeLoadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommonResponse'
      summary: Создание задач, на загрузку сеток Light Mode.
      tags:
      - Блоки
  /api/v1/program-breaks-light/query:
    post:
      consumes:
      - application/json
      description: 'Динамический запрос на загрузку сохраненных данных. Логические
        операторы: eq ==, ne !=, gt >, lt <, ge >=, le <=, in in, isnil is nil.'
      operationId: routes-query-program-breaks-light-mode
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ProgramBreaksLightModeQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommonResponse'
      summary: Загрузка сохраненных сеток Light Mode.
      tags:
      - Блоки
  /api/v1/program-breaks/load:
    post:
      consumes:
      - application/json
      description: Создание задач, на загрузку сеток, за выбранный период.
      operationId: routes-load-program-breaks
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ProgramBreaksLoadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommonResponse'
      summary: Создание задач, на загрузку сеток.
      tags:
      - Блоки
  /api/v1/program-breaks/pro-master/query:
    post:
      consumes:
      - application/json
      description: 'Динамический запрос на загрузку сохраненных данных. Логические
        операторы: eq ==, ne !=, gt >, lt <, ge >=, le <=, in in, isnil is nil.'
      operationId: routes-query-program-breaks-pro-master
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ProMasterQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommonResponse'
      summary: Загрузка сохраненных сеток.
      tags:
      - Блоки
  /api/v1/program-breaks/query:
    post:
      consumes:
      - application/json
      description: 'Динамический запрос на загрузку сохраненных данных. Логические
        операторы: eq ==, ne !=, gt >, lt <, ge >=, le <=, in in, isnil is nil.'
      operationId: routes-query-program-breaks
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ProgramBreaksQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommonResponse'
      summary: Загрузка сохраненных сеток.
      tags:
      - Блоки
  /api/v1/ranks:
    post:
      consumes:
      - application/json
      description: Возвращает справочник рангов размещения.
      operationId: routes-get-ranks
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerGetRanksRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StreamResponse'
      summary: Возвращает справочник рангов размещения.
      tags:
      - Справочники
  /api/v1/ranks/load:
    post:
      consumes:
      - application/json
      description: Создание задач, на загрузку рангов размещения.
      operationId: routes-load-ranks
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.RanksLoadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommonResponse'
      summary: Создание задач, на загрузку рангов размещения.
      tags:
      - Справочники
  /api/v1/ranks/query:
    post:
      consumes:
      - application/json
      description: 'Динамический запрос на загрузку сохраненных данных. Логические
        операторы: eq ==, ne !=, gt >, lt <, ge >=, le <=, in in, isnil is nil.'
      operationId: routes-query-ranks
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.RankQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommonResponse'
      summary: Загрузку сохраненных рангов размещения.
      tags:
      - Справочники
  /api/v1/spot:
    delete:
      consumes:
      - application/json
      description: Удаление спота в блоке.
      operationId: routes-delete-spot
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerDeleteSpotRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StreamResponse'
      summary: Удаление спота в блоке.
      tags:
      - Споты
    post:
      consumes:
      - application/json
      description: Возвращает список спотов.
      operationId: routes-get-spots
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerGetSpotsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StreamResponse'
      summary: Возвращает список спотов.
      tags:
      - Споты
    put:
      consumes:
      - application/json
      description: Постановка спота в блок.
      operationId: routes-add-spot
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerAddSpotRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StreamResponse'
      summary: Постановка спота в блок.
      tags:
      - Споты
  /api/v1/spot/change:
    post:
      consumes:
      - application/json
      description: Замена спота в блок.
      operationId: routes-change-spot
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerChangeSpotRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StreamResponse'
      summary: Замена спота в блок.
      tags:
      - Споты
  /api/v1/spot/change-films:
    post:
      consumes:
      - application/json
      description: Заменяет в спотах существующие ролики в медиапланах на указанные
        в CommInMplIDs (не больше трех).
      operationId: routes-change-films
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerChangeFilmsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StreamResponse'
      summary: Заменяет в спотах существующие ролики в медиапланах на указанные в
        CommInMplIDs (не больше трех).
      tags:
      - Споты
  /api/v1/spot/deleted-info:
    post:
      consumes:
      - application/json
      description: Возвращает информацию об удаленных за период спотах
      operationId: routes-get-deleted-spots-info
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerGetDeletedSpotInfoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StreamResponse'
      summary: Возвращает информацию об удаленных за период спотах
      tags:
      - Споты
  /api/v1/spot/load:
    post:
      consumes:
      - application/json
      description: Создание задач на загрузку спотов.
      operationId: routes-load-spots
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SpotsLoadRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommonResponse'
      summary: Создание задач на загрузку спотов.
      tags:
      - Споты
  /api/v1/spot/order-block/query:
    post:
      consumes:
      - application/json
      description: 'Динамический запрос на загрузку сохраненных данных. Логические
        операторы: eq ==, ne !=, gt >, lt <, ge >=, le <=, in in, isnil is nil.'
      operationId: routes-query-spots-order-block
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.QuerySpotsOrderBlockQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommonResponse'
      summary: Загрузка сохраненных спотов.
      tags:
      - Споты
  /api/v1/spot/query:
    post:
      consumes:
      - application/json
      description: 'Динамический запрос на загрузку сохраненных данных. Логические
        операторы: eq ==, ne !=, gt >, lt <, ge >=, le <=, in in, isnil is nil.'
      operationId: routes-query-spots
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SpotsQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommonResponse'
      summary: Загрузка сохраненных спотов.
      tags:
      - Споты
  /api/v1/spot/set-position:
    post:
      consumes:
      - application/json
      description: Выполняет позиционирование спота..
      operationId: routes-set-spot-position
      parameters:
      - description: Запрос
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerSetSpotPositionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StreamResponse'
      summary: Выполняет позиционирование спота..
      tags:
      - Споты
swagger: "2.0"
